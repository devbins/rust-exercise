* example
** 格式化输出
*** fmt
    #+begin_src rust
    println!("{} days", 31);
    // 使用位置参数
    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");

    // 使用命名参数
    println!("{subject} {verb} {object}", object="the lazy dog", subject="the quick brown fox", verb="jumps over");
    // :指定格式
    println!("{} of {:b} people know binary, the other half don't", 1, 2);

    // 指定宽度
    println!("{number:>width$}", number=1, width=6);

    println!("{number:>0width$}", number=1, width=6);

    println!("my name is {0}, {1} {0}", "Bond", "james");

    #[allow(dead_code)]
    #[derive(Debug)]
    struct Structurte(i32);

    println!("This struct `{:?}` won't print...",Structurte(3));

    println!("{1:?} {0:?} is the {actor:?} name.", "Slater", "Christian", actor="actor's");

    // 美化打印
    #[derive(Debug)]
    struct Person<'a> {
        name: &'a str,
        age: u8
    }

    let name = "Peter";
    let age = 27;
    let peter = Person{ name, age };
    println!("{:#?}", peter);
    #+end_src

    #+RESULTS:
    #+begin_example
    31 days
    Alice, this is Bob. Bob, this is Alice
    the quick brown fox jumps over the lazy dog
    1 of 10 people know binary, the other half don't
         1
    000001
    my name is Bond, james Bond
    This struct `Structurte(3)` won't print...
    "Christian" "Slater" is the "actor's" name.
    Person {
        name: "Peter",
        age: 27,
    }
    #+end_example
*** Display
    #+begin_src rust
    use std::fmt;

    struct Structure(i32);

    impl fmt::Display for Structure {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            write!(f, "{}", self.0)
        }
    }

    println!("{}", Structure(18));

    #[derive(Debug)]
    struct MinMax(i64, i64);


    impl fmt::Display for MinMax {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            write!(f, "({}, {})", self.0, self.1)
        }
    }

    #[derive(Debug)]
    struct Point2D {
        x: f64,
        y: f64,
    }

    impl fmt::Display for Point2D {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            write!(f, "x: {}, y: {}", self.x, self.y)
        }
    }

    let minmax = MinMax(0, 14);

    println!("Compare Structres:");
    println!("Display: {}", minmax);
    println!("Debug: {:?}", minmax);


    let big_range = MinMax(-300,300);
    let small_range = MinMax(-3, 3);
    println!("The big range is {big} and the small is {small}",
                 small = small_range,
                 big = big_range);

    let point = Point2D { x: 3.3, y: 7.2 };

    println!("Compare points:");
    println!("Display: {}", point);
    println!("Debug: {:?}", point);
    #+end_src

    #+RESULTS:
    : 18
    : Compare Structres:
    : Display: (0, 14)
    : Debug: MinMax(0, 14)
    : The big range is (-300, 300) and the small is (-3, 3)
    : Compare points:
    : Display: x: 3.3, y: 7.2
    : Debug: Point2D { x: 3.3, y: 7.2 }
**** 习题
     #+begin_src rust
     use std::fmt;

     #[derive(Debug)]
     struct Complex {
         real: f64,
         imag: f64,
     }

     impl fmt::Display for Complex {
         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
             write!(f, "{} + {}i", self.real, self.imag)
         }
     }

     let com = Complex{real:3.3, imag:7.2};

     println!("Display: {}", com);

     println!("Debug: {:?}",com);
     #+end_src

     #+RESULTS:
     : Display: 3.3 + 7.2i
     : Debug: Complex { real: 3.3, imag: 7.2 }
*** 测试实例
    #+begin_src rust
    use std::fmt;

    struct List(Vec<i32>);

    impl fmt::Display for List {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            let vec = &self.0;
            write!(f, "[")?;
            // for (count, v) in self.0.iter().enumerate() {
            for (count, v) in vec.iter().enumerate() {
                if count != 0 {
                    write!(f, ", ")?;
                }
                write!(f, "{}: {}", count, v)?;
            }
            write!(f, "]")
        }
    }

    let v = List(vec![1, 2, 3]);
    println!("{}", v);
    #+end_src

    #+RESULTS:
    : [0: 1, 1: 2, 2: 3]
